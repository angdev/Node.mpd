// Generated by CoffeeScript 1.4.0
(function() {
  var MessageQueue, MpdHelper, MpdService, SocketWrapper, TestModule, init,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    _this = this;

  SocketWrapper = (function() {

    function SocketWrapper() {
      this.Socket = __bind(this.Socket, this);

      this.RegisterListener = __bind(this.RegisterListener, this);
      this.socket = io.connect(location.host);
      console.log('socket connected.');
    }

    SocketWrapper.prototype.RegisterListener = function(type, listener) {
      return this.socket.on(type, listener);
    };

    SocketWrapper.prototype.Socket = function() {
      return this.socket;
    };

    return SocketWrapper;

  })();

  MessageQueue = (function() {

    function MessageQueue() {
      this._process = __bind(this._process, this);

      this._onMessage = __bind(this._onMessage, this);

      this._frontRequest = __bind(this._frontRequest, this);

      this._popRequest = __bind(this._popRequest, this);

      this.PushRequest = __bind(this.PushRequest, this);

      this.RegisterListener = __bind(this.RegisterListener, this);
      this.socket_wrap = new SocketWrapper();
      this.queue = [];
      this.type_callback_dict = {};
      console.log('RequestQueue Constructed');
      setInterval(this._process, 20);
    }

    MessageQueue.prototype.RegisterListener = function(type, callback) {
      this.socket_wrap.RegisterListener(type, this._onMessage);
      this.type_callback_dict[type] = callback;
      return console.log(type + ' listener registered.');
    };

    MessageQueue.prototype.PushRequest = function(req) {
      var handler;
      if (req === null) {
        return;
      }
      if (req.type === void 0) {
        return;
      }
      if (req.type === 'mpd' && req.data === void 0) {
        return;
      }
      if (req.type === 'func' && req.func === void 0) {
        return;
      }
      handler = {};
      handler['req'] = req;
      handler['is_processing'] = false;
      handler['is_processed'] = false;
      return this.queue.push(handler);
    };

    MessageQueue.prototype._popRequest = function() {
      return this.queue.shift();
    };

    MessageQueue.prototype._frontRequest = function() {
      return this.queue[0];
    };

    MessageQueue.prototype._onMessage = function(data) {
      var handler, ret_arr;
      handler = this._frontRequest();
      ret_arr = {};
      ret_arr['data'] = data;
      ret_arr['callback'] = handler.req.callback;
      this.type_callback_dict[handler.req.type](ret_arr);
      return handler.is_processed = true;
    };

    MessageQueue.prototype._process = function() {
      var handler;
      if (this.queue.length <= 0) {
        return;
      }
      if (this.socket === null) {
        return;
      }
      handler = this._frontRequest();
      if (!handler.is_processed) {
        if (!handler.is_processing) {
          if (handler.req.type === 'mpd') {
            this.socket_wrap.Socket().emit(handler.req.type, handler.req.data);
          } else if (handler.req.type === 'func') {
            handler.req.func();
            handler.is_processed = true;
          }
          return handler.is_processing = true;
        } else {

        }
      } else {
        return this._popRequest();
      }
    };

    return MessageQueue;

  })();

  MpdHelper = (function() {

    function MpdHelper() {
      this.ParseMpdData = __bind(this.ParseMpdData, this);

    }

    MpdHelper.prototype.ParseMpdData = function(data) {
      var list, parsed, splited, _fn, _i, _len;
      splited = data.split('\n');
      parsed = {};
      _fn = function(list) {
        var t;
        t = list.split(':');
        if (typeof t[1] === !String || t[1] === void 0) {
          return;
        }
        return parsed[t[0]] = t[1].substr(1);
      };
      for (_i = 0, _len = splited.length; _i < _len; _i++) {
        list = splited[_i];
        _fn(list);
      }
      return parsed;
    };

    return MpdHelper;

  })();

  MpdService = (function() {

    function MpdService(msg_queue) {
      this._logPlaylist = __bind(this._logPlaylist, this);

      this._requestPlaylist = __bind(this._requestPlaylist, this);

      this._addToTable = __bind(this._addToTable, this);

      this._getStatus = __bind(this._getStatus, this);

      this._update = __bind(this._update, this);

      this._onMpd = __bind(this._onMpd, this);

      this.StartUpdate = __bind(this.StartUpdate, this);

      this.Init = __bind(this.Init, this);
      console.log('Mpd Service start');
      this.queue = msg_queue;
      this.helper = new MpdHelper();
      msg_queue.RegisterListener("mpd", this._onMpd);
    }

    MpdService.prototype.Init = function() {
      var req,
        _this = this;
      req = {};
      req['type'] = 'mpd';
      req['data'] = {
        cmd: 'status',
        data: 'status\n'
      };
      req['callback'] = function(data) {
        var cid, i, parsed, _i, _ref, _ref1, _req;
        parsed = _this.helper.ParseMpdData(data.data);
        cid = parseInt(parsed.songid);
        for (i = _i = _ref = cid - 15, _ref1 = cid + 15; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = _ref <= _ref1 ? ++_i : --_i) {
          _req = {};
          _req['type'] = 'mpd';
          _req['data'] = {
            cmd: 'playlistid',
            data: 'playlistid ' + i + '\n'
          };
          _req['callback'] = function(data) {
            return _this._addToTable(data);
          };
          _this.queue.PushRequest(_req);
        }
        req = {};
        req['type'] = 'func';
        req['func'] = function() {
          return $("tr[songid='" + cid + "']").css('background-color', '#abcdef');
        };
        return _this.queue.PushRequest(req);
      };
      return this.queue.PushRequest(req);
    };

    MpdService.prototype.StartUpdate = function() {
      return setInterval(this._update, 1000);
    };

    MpdService.prototype._onMpd = function(ret_arr) {
      return ret_arr.callback(ret_arr.data);
    };

    MpdService.prototype._update = function() {
      return console.log('update');
    };

    MpdService.prototype._getStatus = function(callback) {
      var req;
      req = {};
      req['type'] = 'mpd';
      req['data'] = {
        cmd: 'status',
        data: 'status\n'
      };
      req['callback'] = callback;
      return this.queue.PushRequest(req);
    };

    MpdService.prototype._addToTable = function(data) {
      var album, artist, parsed, title;
      parsed = this.helper.ParseMpdData(data.data);
      console.log(parsed);
      title = parsed.Title;
      artist = parsed.Artist;
      album = parsed.Album;
      return $("#song_list tbody").append('<tr songid="' + parsed.Id + '"><td>' + title + '</td><td>' + artist + '</td><td>' + album + '</td></tr>');
    };

    MpdService.prototype._requestPlaylist = function(id) {
      var req,
        _this = this;
      req = {};
      req['type'] = 'mpd';
      req['data'] = {
        cmd: 'playlistid',
        data: 'playlistid ' + id + '\n'
      };
      req['callback'] = function(data) {
        var album, artist, parsed, title;
        parsed = _this.helper.ParseMpdData(data.data);
        title = parsed.Title;
        artist = parsed.Artist;
        album = parsed.Album;
        return $("#song_list tbody").append('<tr songid="' + parsed.Id(+'"><td>' + title + '</td><td>' + artist + '</td><td>' + album + '</td></tr>'));
      };
      return this.queue.PushRequest(req);
    };

    MpdService.prototype._logPlaylist = function() {
      var req;
      req = {};
      req['type'] = 'mpd';
      req['data'] = {
        cmd: 'playlistinfo',
        data: 'playlistinfo 220:221\n'
      };
      req['callback'] = function(data) {};
      return this.queue.PushRequest(req);
    };

    return MpdService;

  })();

  TestModule = (function() {

    function TestModule(msg_queue) {
      this.mpd = __bind(this.mpd, this);
      console.log('TestModule Start');
      this.queue = msg_queue;
    }

    TestModule.prototype.mpd = function(_cmd, _data, _callback) {
      var req;
      req = {};
      req['type'] = "mpd";
      req['data'] = {
        cmd: _cmd,
        data: _data
      };
      req['callback'] = _callback;
      return this.queue.PushRequest(req);
    };

    return TestModule;

  })();

  this.msg_queue = new MessageQueue();

  this.mpd = new MpdService(this.msg_queue);

  this.test = new TestModule(this.msg_queue);

  init = function() {
    _this.socket.emit('currentsong');
    return _this.socket.emit('status');
  };

  $('document').ready(function() {
    mpd.Init();
    return mpd.StartUpdate();
  });

}).call(this);
